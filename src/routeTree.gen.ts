/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PtsImport } from './routes/pts'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as PostPostIdImport } from './routes/post/$postId'
import { Route as PostPostIdUpdateImport } from './routes/post_/$postId/update'

// Create Virtual Routes

const TssLazyImport = createFileRoute('/tss')()
const RegisterLazyImport = createFileRoute('/register')()
const LoginLazyImport = createFileRoute('/login')()
const GhLazyImport = createFileRoute('/gh')()
const ContactLazyImport = createFileRoute('/contact')()
const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TssLazyRoute = TssLazyImport.update({
  path: '/tss',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tss.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const GhLazyRoute = GhLazyImport.update({
  path: '/gh',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/gh.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const PtsRoute = PtsImport.update({
  path: '/pts',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PostPostIdRoute = PostPostIdImport.update({
  path: '/post/$postId',
  getParentRoute: () => rootRoute,
} as any)

const PostPostIdUpdateRoute = PostPostIdUpdateImport.update({
  path: '/post/$postId/update',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/pts': {
      id: '/pts'
      path: '/pts'
      fullPath: '/pts'
      preLoaderRoute: typeof PtsImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/gh': {
      id: '/gh'
      path: '/gh'
      fullPath: '/gh'
      preLoaderRoute: typeof GhLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/tss': {
      id: '/tss'
      path: '/tss'
      fullPath: '/tss'
      preLoaderRoute: typeof TssLazyImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId': {
      id: '/post/$postId'
      path: '/post/$postId'
      fullPath: '/post/$postId'
      preLoaderRoute: typeof PostPostIdImport
      parentRoute: typeof rootRoute
    }
    '/post/$postId/update': {
      id: '/post/$postId/update'
      path: '/post/$postId/update'
      fullPath: '/post/$postId/update'
      preLoaderRoute: typeof PostPostIdUpdateImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/pts': typeof PtsRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/gh': typeof GhLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tss': typeof TssLazyRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/$postId/update': typeof PostPostIdUpdateRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/pts': typeof PtsRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/gh': typeof GhLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tss': typeof TssLazyRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/$postId/update': typeof PostPostIdUpdateRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/dashboard': typeof DashboardRoute
  '/pts': typeof PtsRoute
  '/about': typeof AboutLazyRoute
  '/contact': typeof ContactLazyRoute
  '/gh': typeof GhLazyRoute
  '/login': typeof LoginLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tss': typeof TssLazyRoute
  '/post/$postId': typeof PostPostIdRoute
  '/post/$postId/update': typeof PostPostIdUpdateRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/pts'
    | '/about'
    | '/contact'
    | '/gh'
    | '/login'
    | '/register'
    | '/tss'
    | '/post/$postId'
    | '/post/$postId/update'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/pts'
    | '/about'
    | '/contact'
    | '/gh'
    | '/login'
    | '/register'
    | '/tss'
    | '/post/$postId'
    | '/post/$postId/update'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/pts'
    | '/about'
    | '/contact'
    | '/gh'
    | '/login'
    | '/register'
    | '/tss'
    | '/post/$postId'
    | '/post/$postId/update'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  DashboardRoute: typeof DashboardRoute
  PtsRoute: typeof PtsRoute
  AboutLazyRoute: typeof AboutLazyRoute
  ContactLazyRoute: typeof ContactLazyRoute
  GhLazyRoute: typeof GhLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  TssLazyRoute: typeof TssLazyRoute
  PostPostIdRoute: typeof PostPostIdRoute
  PostPostIdUpdateRoute: typeof PostPostIdUpdateRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  DashboardRoute: DashboardRoute,
  PtsRoute: PtsRoute,
  AboutLazyRoute: AboutLazyRoute,
  ContactLazyRoute: ContactLazyRoute,
  GhLazyRoute: GhLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  TssLazyRoute: TssLazyRoute,
  PostPostIdRoute: PostPostIdRoute,
  PostPostIdUpdateRoute: PostPostIdUpdateRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/pts",
        "/about",
        "/contact",
        "/gh",
        "/login",
        "/register",
        "/tss",
        "/post/$postId",
        "/post/$postId/update"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/pts": {
      "filePath": "pts.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/gh": {
      "filePath": "gh.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/tss": {
      "filePath": "tss.lazy.tsx"
    },
    "/post/$postId": {
      "filePath": "post/$postId.tsx"
    },
    "/post/$postId/update": {
      "filePath": "post_/$postId/update.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
